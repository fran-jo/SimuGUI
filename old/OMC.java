/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.modelica;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.JMenuItem;

/**
 *
 * @author ekj05
 */
public class OMC extends javax.swing.JFrame {

    /**
     * Creates new form OMC
     */
	private ArrayList<String> history1 = new ArrayList<String>();
	
	private OMCProxy omc;

	private JMenuItem jMenuItem22;
	
    public OMC() {
        initComponents();
    }
    //------
    private void ExecuteCommand(String command)
	{
		System.out.println("Expression from Execute Command Class:" + command);		
		if (command != null && 
			command.length() > 0)
		{
			history1.add(command);
			 String result = "";
			
			result.length();
			
			try
			{
				
				jTextArea1.append("\nSending expression:" + command);
				result = omc.sendExpression(command);
				jTextArea1.append("\n"+"length of the result :" +result.length());
				
				jTextArea1.append("\nGot reply: " + result);					
			}
			catch(Exception ex)
			{
				jTextArea1.append(
				  "\nError while sending expression: " + command + "\n"+
				  ex.getMessage());
			}
			jTextArea1.setText("");
		}
		else
		{
			jTextArea1.append("\nNo expression sent because is empty");
		}		
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    public void initComponents() {
    	this.omc = new OMCProxy();
		history1.clear();
		history1.add(0, "getVersion()");
		history1.add(0, "loadModel(Modelica)");
		//history.add(0, "loadFile(C:/workspace/dcmotor2.mo)");
		history1.add(0, "loadFile(BouncingBall)");
		history1.add(0, "simulate(mycircuit, stopTime=10.0)");
		history1.add(0, "getClassNames()");
		history1.add(0, "getClassInformation()");

        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane3 = new javax.swing.JSplitPane();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        javax.swing.JTabbedPane jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OMC ");
        setPreferredSize(new java.awt.Dimension(1200, 800));

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane3.setDividerLocation(100);
        jSplitPane3.setDividerSize(2);
        jSplitPane3.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jSplitPane3AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
                if (evt.getKeyCode() == KeyEvent.VK_ENTER)
				{ String result = "";
					try {
						result=omc.sendExpression(jTextField1.getText());
						jTextArea1.append("\n"+"length of the result :" +result.length());
						
						jTextArea1.append("\nGot reply: " + result);
						//jTextArea1.setText("");
						jTextField1.setText("");
						
					} catch (ConnectException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				}
                if (evt.getKeyCode() == KeyEvent.VK_UP)
				{
					// set the last command in the text field
					jTextField1.setText(history1.get(history1.size()-1));
					// move the last command at the beginning!
					String tmp = history1.get(history1.size()-1);
					history1.add(0, tmp);
					history1.remove(history1.size()-1);
				}
				if (evt.getKeyCode() == KeyEvent.VK_DOWN)
				{
					// set the first command in the text field
					jTextField1.setText(history1.get(0));
					// move the first command at the end!
					String tmp = history1.get(0);
					history1.add(history1.size()-1, tmp);
					history1.remove(0);
				}
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
               
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        jSplitPane3.setRightComponent(jTextField1);

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jSplitPane3.setLeftComponent(jButton1);

        jSplitPane1.setLeftComponent(jSplitPane3);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTextArea2AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane2.setViewportView(jTextArea2);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jToolBar1.setRollover(true);

        jButton2.setText("Save Model");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setText("Load Model");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
                String result = "";
              
				try {
					result=omc.sendExpression(jTextArea2.getText());
					//jTextArea1.append("\n"+"length of the result :" +result.length());
					
					
					jTextArea1.append("\nGot reply: " + result);
					//jTextArea1.setText("");
					
				} catch (ConnectException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        jToolBar1.add(jButton3);

        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setPreferredSize(new java.awt.Dimension(10, 10));
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jPanel1.add(jToolBar1, java.awt.BorderLayout.PAGE_START);
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\enam\\Downloads\\images\\Untitled.jpg"));
        jPanel1.add(jLabel1, java.awt.BorderLayout.PAGE_END);
        jPanel1.add(jLabel2, java.awt.BorderLayout.LINE_END);

        jTabbedPane1.addTab("Editor", jPanel1);
        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\enam\\Downloads\\images\\Untitled.jpg"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);
        jPanel2.add(jLabel3, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Console", jPanel2);

        jSplitPane1.setRightComponent(jTabbedPane1);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Editor");

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        jMenuItem1.setText("Open Project...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setText("Save As...");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Exit");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setLabel("Edit");

        jMenuItem5.setLabel("Edit Model");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
                String result="";
                String result1="";
               
               
                try (BufferedReader br = new BufferedReader(new FileReader("input.txt"))){
					 
					 
					 jTextArea2.append(""); 
					 String sCurrentLine;
					  
					 while ((sCurrentLine = br.readLine()) != null) {
					 System.out.println(sCurrentLine);
					 //textField.setText(sCurrentLine); // to show the model in the label
					 String comand= "list("+sCurrentLine+")";
					// ExecuteCommand(comand);
						result=omc.sendExpression(comand);
						result1=result.substring(1, result.length()-2);
						System.out.println("result length"+result.length());
						jTextArea2.append(result1);	
					 }
					  
					 } catch (Exception exx) {
					 exx.printStackTrace();
					 }
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        jMenu3.setLabel("Run");

        jMenuItem2.setLabel("Load Modelica");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
                String comm="loadModel(Modelica)";
				//String result="";
			try{
				//ExecuteCommand(comm);
				String resultt = omc.sendExpression(comm);
				
				jTextArea1.append("\nGot reply: " + resultt);	
			}catch(Exception exx){
				
			}
                
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem6.setLabel("Simulate");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
                new SimulationSetup().setVisible(true);
                /*String result="";
                try (BufferedReader br = new BufferedReader(new FileReader("input.txt"))){
					 
					 
					  
					 String sCurrentLine;
					  
					 while ((sCurrentLine = br.readLine()) != null) {
					 System.out.println(sCurrentLine);
					 //textField.setText(sCurrentLine); // to show the model in the label
					 String comand= "simulate("+sCurrentLine+")";
					// ExecuteCommand(comand);
						result=omc.sendExpression(comand);
						jTextArea1.append("\nGot reply: " + result);	
					 }
					  
					 } catch (Exception exx) {
					 exx.printStackTrace();
					 }*/
            }
        });
        jMenu3.add(jMenuItem6);
       
        
        

        jMenuBar1.add(jMenu3);

        jMenu4.setLabel("Plot");

        jMenuItem7.setLabel("Plot Model");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
                String result="";
                try (BufferedReader br = new BufferedReader(new FileReader("input.txt"))){
					 
					 
					  
					 String sCurrentLine;
					  
					 while ((sCurrentLine = br.readLine()) != null) {
					 System.out.println(sCurrentLine);
					 //textField.setText(sCurrentLine); // to show the model in the label
					 //String comand= "simulate("+sCurrentLine+")";
					 String comand="plotAll()";
					// ExecuteCommand(comand);
						result=omc.sendExpression(comand);
						jTextArea1.append("\nGot reply: " + result);	
					 }
					  
					 } catch (Exception exx) {
					 exx.printStackTrace();
					 }
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuBar1.add(jMenu4);
        jMenu4.getAccessibleContext().setAccessibleName("Help");

        jMenu5.setLabel("Help");

        jMenuItem8.setLabel("About");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
                String command="getVersion()";
				String result="";
			try{
				result = omc.sendExpression(command);
				jTextArea1.append("\nGot reply: " + result);	
			}catch(Exception exx){
				
			}
            }
        });
        jMenu5.add(jMenuItem8);

        jMenuItem9.setLabel("Source File");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
                String command="getVirsion()";
				String result="";
			try{
				result = omc.sendExpression(command);
				jTextArea1.append("\nGot reply: " + result);	
			}catch(Exception exx){
				
			}
            }
        });
        jMenu5.add(jMenuItem9);

        jMenuItem10.setLabel("Modelica Path");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
                String command="getModelicaPath()";
				String result="";
			try{
				result = omc.sendExpression(command);
				jTextArea1.append("\nGot reply: " + result);	
			}catch(Exception exx){
				
			}
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>                        

    private void jSplitPane3AncestorAdded(javax.swing.event.AncestorEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:(File Chooser)
    	String result="";
    	try{
			JFileChooser Chooser=new JFileChooser();
			File f=new File("H:/workspace");
			Chooser.setCurrentDirectory(f);
			Chooser.showOpenDialog(null);
			System.out.println(Chooser.getSelectedFile());
			//System.out.println(Chooser.getCurr);
			
			
			File g=Chooser.getSelectedFile();
					
			
			String filename= new String();
			filename=g.getName();
			System.out.println("filename:"+filename);
			String modelname=filename.replace(".mo", "");// replacing the .mo form the file 
			System.out.println("modelname"+modelname);
			// passing the model name to other class
			/*try {
				Window intcall=new Window();
				intcall.setModelname(modelname);
				//intcall.getAge();
				//textArea.append("hello");
			} catch (FileNotFoundException ee1) {
				// TODO Auto-generated catch block
				ee1.printStackTrace();
			}*/
			//lblNewLabel_1.setText(modelname);
			String ss;
			File selectedfile=Chooser.getSelectedFile();
			String pathname=selectedfile.getPath();
			System.out.println("pathname:    "+pathname);
			ss="loadFile("+"\""+pathname+"\")";
			//System.out.println("ss printing: "+ss);
			String d=ss.replace("\\", "/");//to change backslash in to Slash for the OMPC.
			//System.out.println("d printing:  "+d);
			//String d=ss.replace( "\", "/"");
			  String sss="\""+d+"\"";// adding " 
			
			//System.out.println("sss printing"+sss);
			String list="loadFile("+modelname+")";
			//System.out.println(list);
			modelnameclass mnc=new modelnameclass();
			mnc.setModelname(modelname);
			/*String creatpath=pathname.replace(filename, "");
			System.out.println(creatpath);*/
			
			//executeCommand(d);
			//result = omc.sendExpression(list);
			result = omc.sendExpression(d);
			//ExecuteCommand(d);
			jTextArea1.append("\n " + result);
			PrintWriter writer = new PrintWriter("input.txt","UTF-8");
			writer.println(modelname);writer.close();
		}catch(Exception exx){exx.getMessage();
			
		}
    }                                          

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {                                     
        // TODO add your handling code here:
    }                                    

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jTextArea2AncestorAdded(javax.swing.event.AncestorEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OMC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OMC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OMC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OMC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OMC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    public javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration                   
}
